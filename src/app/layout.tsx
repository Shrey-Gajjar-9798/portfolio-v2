import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Space_Mono, Major_Mono_Display } from 'next/font/google';
import Navbar from "@/components/global/Navbar";
import localFont from "next/font/local";
const hatton = localFont({
  src: [
    {
      path: "../../public/fonts/HattonUltralight.otf",
      weight: "200",
    },
    {
      path: "../../public/fonts/PPHatton-Medium.otf",
      weight: "500",
    },
    {
      path: "../../public/fonts/PPHatton-Medium.otf",
      weight: "500",
    },
    {
      path: "../../public/fonts/PPHatton-Bold.otf",
      weight: "700",
    },
  ],
  variable: "--font-hatton",
});
const migra = localFont({
  src: [
    {
      path: "../../public/fonts/Migra-Extrabold.ttf",
      weight: "900",
    },
    {
      path: "../../public/fonts/MigraItalic-ExtraboldItalic.otf",
      weight: "800",
    },
  ],
  variable: "--font-migra",
});
const sansRounded = localFont({
  src: [
    {
      path: "../../public/fonts/SansRoundedMedium.otf",
      weight: "500",
    },
    {
      path: "../../public/fonts/SansRoundedBold.otf",
      weight: "700",
    },
  ],
  variable: "--font-sansrounded",
});
const didone = localFont({
  src: [
    {
      path: "../../public/fonts/DidoneLight.otf",
      weight: "200",
    },
    {
      path: "../../public/fonts/DidoneSpatialBlack.otf",
      weight: "300",
    },
    {
      path: "../../public/fonts/DidoneMedium.otf",
      weight: "500",
    },
    {
      path: "../../public/fonts/DidoneBlack.otf",
      weight: "700",
    },
  ],
  variable: "--font-didone",
});

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});


const spaceMono = Space_Mono({ subsets: ['latin'], weight: ['400', '700'] });
const majorMono = Major_Mono_Display({ subsets: ['latin'], weight: '400' });


export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
         className={[
        hatton.variable,
        didone.variable,
        migra.variable,
        sansRounded.variable,
        geistMono.variable,
        geistSans.variable,
        "antialiased"
      ].join(" ")}
      >
        <Navbar />
        {children}
      </body>
    </html>
  );
}
